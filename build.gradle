plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '6.0.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(java_version)
    withSourcesJar()
    // withJavadocJar()
}

version = "$minecraft_version-$mod_version"
base {
    archivesName = project.name
}

minecraft {
    // Channel   | Version              | Comment
    // --------- | -------------------- | ---------------
    // official  | MCVersion            | Official field/method names from Mojang mapping files
    // parchment | YYYY.MM.DD-MCVersion | Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    def parchmentmc_mapping_version = "$parchmentmc_version-$minecraft_version"
    if (parchmentmc_mc_version != minecraft_version) {
        parchmentmc_mapping_version = "$parchmentmc_mc_version-$parchmentmc_mapping_version"
    }
    mappings channel: 'parchment', version: parchmentmc_mapping_version

    // Have all Eclipse/IntelliJ IDEA run configurations run the "prepareXXX" task before launching the game.
    // enableEclipsePrepareRuns = true
    // enableIdeaPrepareRuns = true

    // Allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    // Automatically enable neoforge AccessTransformers if the file exists
    // This location is hardcoded in FML and can not be changed.
    // https://github.com/neoforged/FancyModLoader/blob/a952595eaaddd571fbc53f43847680b00894e0c1/loader/src/main/java/net/neoforged/fml/loading/moddiscovery/ModFile.java#L118
    // https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/
    def at = file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformer = at
    }

    // makeObfSourceJar = false

    runs {
        configureEach {
            workingDirectory project.file('runs')

            // log4j2 bug fix
            property 'log4j2.formatMsgNoLookups', 'true'

            // Recommended logging data for a userdev environment
            // Added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            // https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // mods {
            //     "${project.mod_id}" {
            //         source sourceSets.main
            //     }
            // }
        }

        client {
            workingDirectory project.file('runs/client')
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            workingDirectory project.file('runs/server')
            property 'forge.enabledGameTestNamespaces', project.mod_id
            args '-nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('runs/gametest')
            property 'forge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            workingDirectory project.file('runs/data')
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources/' }

// /////////////////////////////
// ////////// CAUTION //////////
// /////////////////////////////
// Based on the operating mode of the ParchmentMC plugin,
// repositories containing dependencies requiring deobfuscation cannot be declared as exclusive.
// Just using content filter instead.
repositories {
    mavenCentral()
    // https://docs.gradle.org/current/userguide/declaring_repositories.html#declaring_content_exclusively_found_in_one_repository
    exclusiveContent {
        forRepository {
            maven {
                name 'Sponge'
                url 'https://repo.spongepowered.org/repository/maven-public'
            }
        }
        // includeGroupAndSubgroups has an issue until Gradle 8.7, see https://github.com/gradle/gradle/issues/26569
        filter { includeGroupByRegex('org\\.spongepowered(?:\\..+)?') }
    }
    maven {
        name 'Curse Maven'
        url 'https://cursemaven.com'
        content { includeGroup 'curse.maven' }
    }
    maven {
        name 'Modrinth'
        url 'https://api.modrinth.com/maven'
        content { includeGroup 'maven.modrinth' }
    }
    maven {
        name 'Minecraft Forge'
        url 'https://maven.minecraftforge.net/'
    }
    maven {
        name 'BlameJared'
        url 'https://maven.blamejared.com'
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name 'Jared\'s maven'
        url 'https://maven.blamejared.com/mezz/jei/'
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name 'ModMaven'
        url 'https://modmaven.k-4u.nl'
    }
}

dependencies {
    implementation 'org.jetbrains:annotations:24.1.0'

    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${forge_version}"

    // mixin
    annotationProcessor "org.spongepowered:mixin:$mixin_version:processor"
    testAnnotationProcessor "org.spongepowered:mixin:$mixin_version:processor"

    compileOnly fg.deobf("mezz.jei:$jei_artifact_id-common-api:$jei_version")
    compileOnly fg.deobf("mezz.jei:$jei_artifact_id-forge-api:$jei_version")
    runtimeOnly fg.deobf("mezz.jei:$jei_artifact_id-forge:$jei_version")

    // crash in dev env
    // runtimeOnly fg.deobf("curse.maven:JustEnoughCharacters-250702:$jech_version")
    runtimeOnly fg.deobf("curse.maven:Jade-324717:$jade_version")
    runtimeOnly fg.deobf("curse.maven:catalogue-459701:$catalogue_version")
    runtimeOnly fg.deobf("curse.maven:configured-457570:$configured_version")
    runtimeOnly fg.deobf("curse.maven:searchables-858542:${searchables_version}")
    runtimeOnly fg.deobf("curse.maven:controlling-250398:$controlling_version")
    runtimeOnly fg.deobf("curse.maven:spark-361579:$spark_version")
    runtimeOnly fg.deobf("curse.maven:XaeroMinimap-263420:$xaerominimap_version")
    runtimeOnly fg.deobf("curse.maven:XaeroWorldmap-317780:$xaeroworldmap_version")
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.forge.mixins.json"

    dumpTargetOnFailure = true
    checks = true
    hotSwap = true
    debug.verbose = true
    debug.export = true
}

// A missing property will result in an error.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
def filter = ['pack.mcmeta', '*.mixins.json', 'META-INF/mods.toml']
def expandProps = [
        'version': version,
        'group': project.group, //Else we target the task's group.
        'mod_id': mod_id,
        'mod_name': mod_name,
        'description': project.description,
        'license': license,
        'credits': credits,
        'author': author,
        'resourcepack_format': resourcepack_format,
        'datapack_format': datapack_format,

        'java_version': java_version,
        'mixin_version': mixin_version,
        'minecraft_version': minecraft_version,
        'forge_version': forge_version,

        'minecraft_request': minecraft_request,
        'fml_request': fml_request,
        'forge_request': forge_request
]
void expandPropsToResources(ProcessResources task, Iterable<String> resourceFilter, Map<String, ?> props) {
    task.duplicatesStrategy = DuplicatesStrategy.INCLUDE
    task.filesMatching(resourceFilter) {
        expand props
    }
    task.inputs.properties props
}
tasks.withType(ProcessResources).configureEach {
    expandPropsToResources(it, filter, expandProps)
}

tasks.withType(JavaCompile).configureEach {
    options.release = Integer.parseInt(java_version)
    options.encoding = 'UTF-8'
}

tasks.named('sourcesJar') {
    from(rootProject.file("LICENSE")) {
        rename { "${it}_${mod_name.replaceAll("\\W", "")}" }
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
tasks.named('jar', Jar) {
    from(rootProject.file("LICENSE")) {
        rename { "${it}_${mod_name.replaceAll("\\W", "")}" }
    }

    manifest {
        attributes([
                'Specification-Title'   : mod_name,
                'Specification-Vendor'  : author,
                'Specification-Version' : '1', // We are version 1 of ourselves
                'Implementation-Title'  : project.name,
                'Implementation-Version': project.jar.archiveVersion,
                'Implementation-Vendor' : author,
                'Built-On-Minecraft'    : minecraft_version,
                'Implementation-Timestamp': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ')
                // 'MixinConfigs': "${mod_id}.forge.mixins.json"  // MixinGradle will handle it
        ])
    }

    // Preferred method to reobfuscate the jar file
    jar.finalizedBy('reobfJar')
}
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// tasks.named('publish') {
//     dependsOn 'reobfJar'
// }

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            // url System.getenv("local_maven_url")
            url "file:///$project.projectDir/mcmodsrepo"
        }
    }
}
